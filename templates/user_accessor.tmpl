package db

import (
    "golang.org/x/crypto/bcrypt"
    domain "{{ .DomainPkgImportPath }}"
    "github.com/google/uuid"
    "gorm.io/gorm"
    "time"
)

type UserAccessor struct {
    db *gorm.DB
}

type UserAccessorOption func(*UserAccessor)

func NewUserAccessor(opts ...UserAccessorOption) *UserAccessor {
    accessor := &UserAccessor{
        db: NewDbConnection(),
    }

    for _, opt := range opts {
        opt(accessor)
    }

    return accessor
}

func WithDb(db *gorm.DB) func(*UserAccessor) {
    return func(accessor *UserAccessor) {
        accessor.db = db
    }
}

func (a *UserAccessor) GetById(id string) (domain.User, error) {
    var user domain.User
    if result := a.db.First(&user, "id", id); result.Error != nil {
        return domain.User{}, result.Error
    }
    return user, nil
}

func (a *UserAccessor) GetByEmail(email string) (domain.User, error) {
    var user domain.User
    if result := a.db.Where("email = ?", email).First(&user); result.Error != nil {
        return domain.User{}, result.Error
    }

    return user, nil
}

func (a *UserAccessor) GetAll() ([]domain.User, error) {
    var users []domain.User
    if result := a.db.Find(&users); result.Error != nil {
        return []domain.User{}, result.Error
    }

    return users, nil
}

func (a *UserAccessor) Create(email string, password string) (domain.User, error) {
    id := uuid.New().String()

    hashedPassword, err := hashPassword(password)
    if err != nil {
        return domain.User{}, err
    }

    model := domain.User{
        Id:             id,
        Email:          email,
        HashedPassword: hashedPassword,
    }

    if result := a.db.Create(&model); result.Error != nil {
        return domain.User{}, nil
    }

    return model, nil
}

func (a *UserAccessor) Authenticate(email string, password string) (domain.User, error) {
    u, err := a.GetByEmail(email)
    if err != nil {
        return domain.User{}, errors.Wrap(err, "Failed to authenticate user. Error on retrieving user with email %s", email)
    }

    err = comparePassword(u.HashedPassword, password)
    if err != nil {
        return domain.User{}, err
    }

    return u, nil
}

func hashPassword(password string) (string, error) {
	pw := []byte(password)
	result, err := bcrypt.GenerateFromPassword(pw, bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	return string(result), nil
}

func comparePassword(hashPassword string, password string) error {
	pw := []byte(password)
	hw := []byte(hashPassword)
	err := bcrypt.CompareHashAndPassword(hw, pw)
	return err
}
